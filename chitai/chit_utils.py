from playwright.sync_api import sync_playwright, ProxySettings
from urllib.parse import urlparse
import time


def parse_with_playwright_proxy(proxy_url, target_url):
    with sync_playwright() as p:
        # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ URL
        parsed = urlparse(proxy_url)
        proxy_host = parsed.hostname
        proxy_port = parsed.port
        proxy_user = parsed.username
        proxy_pass = parsed.password

        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_host}:{proxy_port}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {proxy_user}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ–∫—Å–∏
        poxy_settings = ProxySettings(
            {
                "server": f"http://{proxy_host}:{proxy_port}",
                "username": proxy_user,
                "password": proxy_pass,
            }
        )
        browser = p.chromium.launch(
            headless=True,  # True –¥–ª—è production
            proxy=poxy_settings,
            args=[
                "--disable-blink-features=AutomationControlled",
                "--no-sandbox",
                "--disable-web-security",
            ],
        )

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        context = browser.new_context(
            viewport={"width": 1920, "height": 1080},
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        )

        # –î–æ–±–∞–≤–ª—è–µ–º stealth —Å–∫—Ä–∏–ø—Ç—ã
        context.add_init_script(
            """
            delete navigator.__proto__.webdriver;
            Object.defineProperty(navigator, 'webdriver', { 
                get: () => undefined 
            });
        """
        )

        page = context.new_page()

        try:
            print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç...")
            page.goto(
                target_url,
                timeout=30000,
            )
            wait_until = "networkidle"
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            page.wait_for_load_state("networkidle")
            time.sleep(2)

            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∞ –∑–∞—â–∏—Ç—É
            content = page.content()
            access_token = None
            if "DDoS-Guard" in content or "cloudflare" in content.lower():
                print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–æ–π—Ç–∏...")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
                page.wait_for_timeout(5000)
                cookies = page.context.cookies()
                for cookie in cookies:
                    if cookie["name"] == "access-token":
                        access_token = cookie["value"]

            return access_token

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            page.screenshot(path="error_screenshot.png")
            print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return None

        finally:
            browser.close()
